/*

  ******************************************************************************
  * @file 			( фаил ):   MAX7219.h
  * @brief 		( описание ):  	Матрица 8 на 8 индикация ( N количество )
  ******************************************************************************
  * @attention 	( внимание ):	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
  ******************************************************************************
  
*/

#ifndef _MAX7219_H
#define _MAX7219_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

// Обязательно нужен #include "main.h" 
// чтоб отдельно не подключать файлы связанные с МК и стандартными библиотеками
#include "main.h"

#include "string.h"

//--------------------------------------------------------------

//******** НАСТРОКИ МАТРИЦЫ	**************************************************
	
	// управление по 3 портам ( настроины как выход без подтяжки )
	// устанавливаем три пина в режиме на выход и ниже указываем кол-во матриц MATRIXS_QUANTITY
	
	//=== указываем порты ( если в кубе назвали их DIN CLK CS то тогда нечего указывать не нужно )
		#if defined (DIN_GPIO_Port)
		#else
			#define DIN_GPIO_Port	GPIOC
			#define DIN_Pin			GPIO_PIN_5
		#endif
		
		#if defined (CLK_GPIO_Port)
		#else
			#define CLK_GPIO_Port   GPIOB
			#define CLK_Pin			GPIO_PIN_14
		#endif
		
		#if defined (CS_GPIO_Port)
		#else
			#define CS_GPIO_Port   GPIOB
			#define CS_Pin		   GPIO_PIN_14
		#endif
	//========================================================================================
		
	// Указываем кол-во матриц
	#define MATRIXS_QUANTITY 	4


//***************************************************************************

#define GPIO_LOW 		GPIO_PIN_RESET
#define GPIO_HIGH 		GPIO_PIN_SET

#define GPIO_CLK(x)		HAL_GPIO_WritePin( CLK_GPIO_Port, CLK_Pin, x )
#define GPIO_CS(x)		HAL_GPIO_WritePin( CS_GPIO_Port, CS_Pin, x )
#define GPIO_DIN(x)		HAL_GPIO_WritePin( DIN_GPIO_Port, DIN_Pin, x )

//***************************************************


extern int32_t x;
extern int32_t y;


/* Functions prototypes ----------------------------------------------*/


/*
	******************************************************************************
	* @brief	 ( описание ):  Записывает в массив указаные координаты
	* @param	( параметры ):	координата Х и У
	* @return  ( возвращает ):	указатель на символ
	******************************************************************************
*/
uint8_t* _getBufferPtr(int16_t x, int16_t y);
//--------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  Рисует указаный пиксель на матрице
	* @param	( параметры ):	координата Х и У и значения пикселя 1 или 0 ( 1-вкл    0-выкл )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void setPixel(int16_t x, int16_t y, uint8_t enabled);
//--------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  Узнать состояния указаного пикселя
	* @param	( параметры ):	координата Х и У
	* @return  ( возвращает ):	значения пикселя 1 или 0 ( 1-вкл    0-выкл )
	******************************************************************************
*/
uint8_t getPixel(int16_t x, int16_t y);
//--------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  Рисует символ или картинку
	* @param	( параметры ):	координата Х и У ( начало символа и размер символа
	* @return  ( возвращает ):	
	******************************************************************************
*/
void drawSprite( const uint8_t* sprite, int x, int y, int width, int height );
//---------------------------------------------------------------------------------  
  
/*
	******************************************************************************
	* @brief	 ( описание ):  Рисует бегущую строку
	* @param	( параметры ):	ссылка на массив с символами ( сама строка )
								координата Х и У ( начало прорисовки строки )
	* @return  ( возвращает ):	
	******************************************************************************
*/ 
void drawString( char* text, int x, int y );
//----------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  реверсирует передаваимый байт
	* @param	( параметры ):	1 байт
	* @return  ( возвращает ):	
	******************************************************************************
*/
static void reverse(uint8_t *b);
//------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция передачи побитово 1 байт информации
	* @param	( параметры ):	1 байт информации для передачи в матрицу
	* @return  ( возвращает ):	
	******************************************************************************
*/
void write_byte(uint8_t byte);
//-------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция вкл или выкл матрицы
	* @param	( параметры ):	1 или 0 ( 1-вкл    0-выкл )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void setEnabled(uint8_t enabled);
//---------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция яркости подсветки
	* @param	( параметры ):	яркость от 0 до 15
	* @return  ( возвращает ):	
	******************************************************************************
 * level:
 * 	0 - lowest (1/32)
 * 15 - highest (31/32)
 */
void setIntensity(uint8_t level);
//--------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция отправки 2 байта информации на дисплей
	* @param	( параметры ):	данные 2 байта
	* @return  ( возвращает ):	
	******************************************************************************
*/
void _displayRow(uint8_t row);
//-----------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция отображения переданной ранее информации на дисплее
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void display(void);
//-----------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  фуекция отчистки массива где храниться информация для отображения
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void clear(void);
//---------------------------------------------------------------------------------

/*
	******************************************************************************
* @brief	 ( описание ):  функция аналогичная setPixel
	* @param	( параметры ):	координата Х
								значение для отображения
	* @return  ( возвращает ):	
	******************************************************************************
*/
void setColumn(int16_t x, uint8_t value);
/*
	******************************************************************************
	* @brief	 ( описание ):  для семи сигментного индикатора показывает цифру в указаном индекаторе
	* @param	( параметры ):	номер дисплея ( 7 сегментный только )
								значение для отображения ( цифра )
								1 или 0 показывать ли точку
	* @return  ( возвращает ):	
	******************************************************************************
 * Sets a digit to the specified value.
 * Digits are numbered 0..(8*N-1).
 * Digits 0..7 are in the first controller, digits 8..15 in the next, etc.
 */
void setDigit(uint16_t digit, uint8_t value, uint8_t dot);
//-----------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция инициализации матриц ( несколько матриц )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void MAX_init (void);
//----------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция подсчета длины строки с учетом кириллицы ( 2 байта на символ )
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
uint16_t strlenUTF8( char* str );


//------------------------------------------------------------------------------------


#ifdef __cplusplus
}
#endif

#endif	/*	_MAX7219_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
